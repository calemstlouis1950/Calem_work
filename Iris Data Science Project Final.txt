{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "3e725d30-aa8c-4ba4-a108-5b91b26959f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Find the current working directory\n",
    "#Numpy,Pandas,Series Object, Pandas Dataframe,Matplotlib, LinePlot,BarPlot,Histogram,Blox Plot and Violin Plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5a14d9b8-a744-479d-b185-58468fcdea29",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2b17cd6a-488e-49f6-a430-0ea9eaaf9a79",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Users\\\\calem'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "fcce14c2-00c9-470a-a5af-85bbfa5adf74",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1aeebb37-4854-4e34-8ed7-8a7c1683923d",
   "metadata": {},
   "outputs": [],
   "source": [
    "iris=pd.read_csv('iris.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c04a4397-380d-401b-ad64-93474b52e37b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SepalLengthCm</th>\n",
       "      <th>SepalWidthCm</th>\n",
       "      <th>PetalLengthCm</th>\n",
       "      <th>PetalWidthCm</th>\n",
       "      <th>Species</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm      Species\n",
       "0   1            5.1           3.5            1.4           0.2  Iris-setosa\n",
       "1   2            4.9           3.0            1.4           0.2  Iris-setosa\n",
       "2   3            4.7           3.2            1.3           0.2  Iris-setosa\n",
       "3   4            4.6           3.1            1.5           0.2  Iris-setosa\n",
       "4   5            5.0           3.6            1.4           0.2  Iris-setosa"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "5b0cc0d1-6dff-4bc9-8851-f2893cb70c2c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SepalLengthCm</th>\n",
       "      <th>SepalWidthCm</th>\n",
       "      <th>PetalLengthCm</th>\n",
       "      <th>PetalWidthCm</th>\n",
       "      <th>Species</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>146</td>\n",
       "      <td>6.7</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>147</td>\n",
       "      <td>6.3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.9</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>148</td>\n",
       "      <td>6.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>149</td>\n",
       "      <td>6.2</td>\n",
       "      <td>3.4</td>\n",
       "      <td>5.4</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>150</td>\n",
       "      <td>5.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.1</td>\n",
       "      <td>1.8</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm  \\\n",
       "145  146            6.7           3.0            5.2           2.3   \n",
       "146  147            6.3           2.5            5.0           1.9   \n",
       "147  148            6.5           3.0            5.2           2.0   \n",
       "148  149            6.2           3.4            5.4           2.3   \n",
       "149  150            5.9           3.0            5.1           1.8   \n",
       "\n",
       "            Species  \n",
       "145  Iris-virginica  \n",
       "146  Iris-virginica  \n",
       "147  Iris-virginica  \n",
       "148  Iris-virginica  \n",
       "149  Iris-virginica  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "9698bb01-8df7-469b-88a5-d7e9f8dabf07",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(150, 6)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a68df3ca-b31b-4dcc-a384-19ef479c1b9e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SepalLengthCm</th>\n",
       "      <th>SepalWidthCm</th>\n",
       "      <th>PetalLengthCm</th>\n",
       "      <th>PetalWidthCm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>150.000000</td>\n",
       "      <td>150.000000</td>\n",
       "      <td>150.000000</td>\n",
       "      <td>150.000000</td>\n",
       "      <td>150.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>75.500000</td>\n",
       "      <td>5.843333</td>\n",
       "      <td>3.054000</td>\n",
       "      <td>3.758667</td>\n",
       "      <td>1.198667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>43.445368</td>\n",
       "      <td>0.828066</td>\n",
       "      <td>0.433594</td>\n",
       "      <td>1.764420</td>\n",
       "      <td>0.763161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.300000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>38.250000</td>\n",
       "      <td>5.100000</td>\n",
       "      <td>2.800000</td>\n",
       "      <td>1.600000</td>\n",
       "      <td>0.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>75.500000</td>\n",
       "      <td>5.800000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.350000</td>\n",
       "      <td>1.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>112.750000</td>\n",
       "      <td>6.400000</td>\n",
       "      <td>3.300000</td>\n",
       "      <td>5.100000</td>\n",
       "      <td>1.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>150.000000</td>\n",
       "      <td>7.900000</td>\n",
       "      <td>4.400000</td>\n",
       "      <td>6.900000</td>\n",
       "      <td>2.500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm\n",
       "count  150.000000     150.000000    150.000000     150.000000    150.000000\n",
       "mean    75.500000       5.843333      3.054000       3.758667      1.198667\n",
       "std     43.445368       0.828066      0.433594       1.764420      0.763161\n",
       "min      1.000000       4.300000      2.000000       1.000000      0.100000\n",
       "25%     38.250000       5.100000      2.800000       1.600000      0.300000\n",
       "50%     75.500000       5.800000      3.000000       4.350000      1.300000\n",
       "75%    112.750000       6.400000      3.300000       5.100000      1.800000\n",
       "max    150.000000       7.900000      4.400000       6.900000      2.500000"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "a10769cb-2d09-4ad7-9f9d-e706c902af70",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SepalLengthCm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>4.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>4.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>4.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  SepalLengthCm\n",
       "0   1            5.1\n",
       "1   2            4.9\n",
       "2   3            4.7\n",
       "3   4            4.6\n",
       "4   5            5.0"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris.iloc[0:5,0:2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "e60bb330-50ff-4ea0-8d5b-d29ee747ae08",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SepalLengthCm</th>\n",
       "      <th>SepalWidthCm</th>\n",
       "      <th>PetalLengthCm</th>\n",
       "      <th>PetalWidthCm</th>\n",
       "      <th>Species</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>5.4</td>\n",
       "      <td>3.9</td>\n",
       "      <td>1.7</td>\n",
       "      <td>0.4</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>4.6</td>\n",
       "      <td>3.4</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.3</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.4</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>4.4</td>\n",
       "      <td>2.9</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>4.9</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.1</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>5.4</td>\n",
       "      <td>3.7</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12</td>\n",
       "      <td>4.8</td>\n",
       "      <td>3.4</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm      Species\n",
       "5    6            5.4           3.9            1.7           0.4  Iris-setosa\n",
       "6    7            4.6           3.4            1.4           0.3  Iris-setosa\n",
       "7    8            5.0           3.4            1.5           0.2  Iris-setosa\n",
       "8    9            4.4           2.9            1.4           0.2  Iris-setosa\n",
       "9   10            4.9           3.1            1.5           0.1  Iris-setosa\n",
       "10  11            5.4           3.7            1.5           0.2  Iris-setosa\n",
       "11  12            4.8           3.4            1.6           0.2  Iris-setosa"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris.loc[5:11]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "095658df-296e-447d-8364-2b8ccfdc8dc2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "d4f1a973-e766-47a2-b88a-37eb652f03a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "6d43cd5b-25c3-4b4e-99bb-5561a56293bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "ad6b3582-3569-4539-be9c-f05dfe930d44",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "5156fc67-60a0-4d40-96c9-b90c3cb23f3f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SepalLengthCm</th>\n",
       "      <th>SepalWidthCm</th>\n",
       "      <th>PetalLengthCm</th>\n",
       "      <th>PetalWidthCm</th>\n",
       "      <th>Species</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm      Species\n",
       "0   1            5.1           3.5            1.4           0.2  Iris-setosa\n",
       "1   2            4.9           3.0            1.4           0.2  Iris-setosa\n",
       "2   3            4.7           3.2            1.3           0.2  Iris-setosa\n",
       "3   4            4.6           3.1            1.5           0.2  Iris-setosa\n",
       "4   5            5.0           3.6            1.4           0.2  Iris-setosa"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "2c9914ad-401c-4404-8f37-ca0dcb2f9aae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SepalLengthCm</th>\n",
       "      <th>SepalWidthCm</th>\n",
       "      <th>PetalLengthCm</th>\n",
       "      <th>PetalWidthCm</th>\n",
       "      <th>Species</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>4.4</td>\n",
       "      <td>2.9</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>4.9</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.1</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>145</th>\n",
       "      <td>146</td>\n",
       "      <td>6.7</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>147</td>\n",
       "      <td>6.3</td>\n",
       "      <td>2.5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.9</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>147</th>\n",
       "      <td>148</td>\n",
       "      <td>6.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148</th>\n",
       "      <td>149</td>\n",
       "      <td>6.2</td>\n",
       "      <td>3.4</td>\n",
       "      <td>5.4</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>150</td>\n",
       "      <td>5.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5.1</td>\n",
       "      <td>1.8</td>\n",
       "      <td>Iris-virginica</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>145 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm  \\\n",
       "0      1            5.1           3.5            1.4           0.2   \n",
       "1      2            4.9           3.0            1.4           0.2   \n",
       "2      3            4.7           3.2            1.3           0.2   \n",
       "8      9            4.4           2.9            1.4           0.2   \n",
       "9     10            4.9           3.1            1.5           0.1   \n",
       "..   ...            ...           ...            ...           ...   \n",
       "145  146            6.7           3.0            5.2           2.3   \n",
       "146  147            6.3           2.5            5.0           1.9   \n",
       "147  148            6.5           3.0            5.2           2.0   \n",
       "148  149            6.2           3.4            5.4           2.3   \n",
       "149  150            5.9           3.0            5.1           1.8   \n",
       "\n",
       "            Species  \n",
       "0       Iris-setosa  \n",
       "1       Iris-setosa  \n",
       "2       Iris-setosa  \n",
       "8       Iris-setosa  \n",
       "9       Iris-setosa  \n",
       "..              ...  \n",
       "145  Iris-virginica  \n",
       "146  Iris-virginica  \n",
       "147  Iris-virginica  \n",
       "148  Iris-virginica  \n",
       "149  Iris-virginica  \n",
       "\n",
       "[145 rows x 6 columns]"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris.drop([3,4,5,6,7])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a72db8ac-3d26-4a8d-a7aa-975160076088",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cfdbdba4-2255-4460-ab2f-6640dff8e601",
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib import pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "95da8038-c123-4473-a124-b4549d69c9a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "x=np.arange(1,11)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "95839e81-1d08-4ed3-9bca-a396f8fdd3f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ce07cfad-c37e-42f9-aaa1-c410680ac057",
   "metadata": {},
   "outputs": [],
   "source": [
    "y=2*x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "04387fec-7960-40c1-95c6-0967505fb12a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 2,  4,  6,  8, 10, 12, 14, 16, 18, 20])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "dde19e32-aed9-445f-afb6-ac42f3593f06",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(x,y)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "6614bde4-0cc3-411a-82b6-6df9dc99bba6",
   "metadata": {},
   "outputs": [],
   "source": [
    "x=np.arange(1,11)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "0d6abb69-4437-4bcb-99e8-5d16e72beae1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "e4b35a28-860c-48d4-97e8-64683557746f",
   "metadata": {},
   "outputs": [],
   "source": [
    "y1=2*x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f92a6f20-f7f9-439b-b8f1-afb52786c9af",
   "metadata": {},
   "outputs": [],
   "source": [
    "y2=3*x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "579dbc7c-ad06-4eaf-9431-9763ebbbdd7c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "05f1d5b2-8746-41e5-a7e7-94f9e0e81289",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.subplot(1,2,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "7342f604-9b79-4525-92dd-f3fa697c0b6b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x22adeceba10>]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(x,y1,color='g',linestyle=':',linewidth=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "5a812a64-12cf-4eab-ab98-e751651fdb70",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.subplot(1,2,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "33a77b5a-0ba4-45a4-a64d-36f9c948f7cc",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(x,y2,color='r',linestyle=':',linewidth=2)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "e5df5898-03d9-4121-961d-4af1b77dd7f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib import pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "8439781c-3dbc-4c08-9d3a-27cc0df35a3f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "19596930-5c8d-46b4-af82-c1203b08b24a",
   "metadata": {},
   "outputs": [],
   "source": [
    "student = {'sam':67,'Matt':23,'Julia':93}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "fd9636f9-5b7b-4a8f-a7c2-dda0e472c468",
   "metadata": {},
   "outputs": [],
   "source": [
    "Names=list(student.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "e14b4d4c-7c68-4970-b48c-8b6c2f7afba6",
   "metadata": {},
   "outputs": [],
   "source": [
    "Values=list(student.values())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "4b75df18-9162-4697-b824-fbb5d84bbddd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(Names,Values)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "a2ff2fa5-c238-4d0e-abd1-e3e4972e034d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.barh(Names,Values,color=\"r\")\n",
    "plt.title('Student')\n",
    "plt.xlabel('Names')\n",
    "plt.ylabel('Marks')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "be0085ad-a1a2-4ed3-9b0f-c947dad72f90",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Scatter Plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "2554a167-f200-4f9c-a064-d530ee447f23",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = [10,20,30,40,50,60,70,80,90]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "8050edce-ca48-4dad-b2d4-97cd3b28963b",
   "metadata": {},
   "outputs": [],
   "source": [
    "y = [8,3,7,1,4,9,3,6,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "23feb9d2-a7bb-49bc-99c2-6664fc4ba16e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x,y)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "90455741-9f71-492e-83be-7c63904c4472",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = [10,20,30,40,50,60,70,80,90]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "13826fb1-6514-4a32-8f88-756d9de99e99",
   "metadata": {},
   "outputs": [],
   "source": [
    "y1= [8,3,7,1,4,9,3,6,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "fe00d5ea-0b36-4cdd-84dc-28eccb2a80d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "y2=[1,2,3,8,6,5,3,9,6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "b671d102-cf8e-41d1-a2e8-d6a24317bafd",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "PathCollection.set() got an unexpected keyword argument 'C'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[145], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m plt\u001b[38;5;241m.\u001b[39mscatter(x,y1,marker\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m*\u001b[39m\u001b[38;5;124m'\u001b[39m,C\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124morange\u001b[39m\u001b[38;5;124m'\u001b[39m,s\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m200\u001b[39m)\n\u001b[0;32m      2\u001b[0m plt\u001b[38;5;241m.\u001b[39mscatter(x,y2,marker\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m*\u001b[39m\u001b[38;5;124m'\u001b[39m,C\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124myellow\u001b[39m\u001b[38;5;124m'\u001b[39m,s\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m300\u001b[39m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\matplotlib\\pyplot.py:3903\u001b[0m, in \u001b[0;36mscatter\u001b[1;34m(x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, edgecolors, plotnonfinite, data, **kwargs)\u001b[0m\n\u001b[0;32m   3884\u001b[0m \u001b[38;5;129m@_copy_docstring_and_deprecators\u001b[39m(Axes\u001b[38;5;241m.\u001b[39mscatter)\n\u001b[0;32m   3885\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mscatter\u001b[39m(\n\u001b[0;32m   3886\u001b[0m     x: \u001b[38;5;28mfloat\u001b[39m \u001b[38;5;241m|\u001b[39m ArrayLike,\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m   3901\u001b[0m     \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs,\n\u001b[0;32m   3902\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m PathCollection:\n\u001b[1;32m-> 3903\u001b[0m     __ret \u001b[38;5;241m=\u001b[39m gca()\u001b[38;5;241m.\u001b[39mscatter(\n\u001b[0;32m   3904\u001b[0m         x,\n\u001b[0;32m   3905\u001b[0m         y,\n\u001b[0;32m   3906\u001b[0m         s\u001b[38;5;241m=\u001b[39ms,\n\u001b[0;32m   3907\u001b[0m         c\u001b[38;5;241m=\u001b[39mc,\n\u001b[0;32m   3908\u001b[0m         marker\u001b[38;5;241m=\u001b[39mmarker,\n\u001b[0;32m   3909\u001b[0m         cmap\u001b[38;5;241m=\u001b[39mcmap,\n\u001b[0;32m   3910\u001b[0m         norm\u001b[38;5;241m=\u001b[39mnorm,\n\u001b[0;32m   3911\u001b[0m         vmin\u001b[38;5;241m=\u001b[39mvmin,\n\u001b[0;32m   3912\u001b[0m         vmax\u001b[38;5;241m=\u001b[39mvmax,\n\u001b[0;32m   3913\u001b[0m         alpha\u001b[38;5;241m=\u001b[39malpha,\n\u001b[0;32m   3914\u001b[0m         linewidths\u001b[38;5;241m=\u001b[39mlinewidths,\n\u001b[0;32m   3915\u001b[0m         edgecolors\u001b[38;5;241m=\u001b[39medgecolors,\n\u001b[0;32m   3916\u001b[0m         plotnonfinite\u001b[38;5;241m=\u001b[39mplotnonfinite,\n\u001b[0;32m   3917\u001b[0m         \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m({\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdata\u001b[39m\u001b[38;5;124m\"\u001b[39m: data} \u001b[38;5;28;01mif\u001b[39;00m data \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;28;01melse\u001b[39;00m {}),\n\u001b[0;32m   3918\u001b[0m         \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs,\n\u001b[0;32m   3919\u001b[0m     )\n\u001b[0;32m   3920\u001b[0m     sci(__ret)\n\u001b[0;32m   3921\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m __ret\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\matplotlib\\__init__.py:1473\u001b[0m, in \u001b[0;36m_preprocess_data.<locals>.inner\u001b[1;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1470\u001b[0m \u001b[38;5;129m@functools\u001b[39m\u001b[38;5;241m.\u001b[39mwraps(func)\n\u001b[0;32m   1471\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21minner\u001b[39m(ax, \u001b[38;5;241m*\u001b[39margs, data\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m   1472\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m data \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m-> 1473\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m func(\n\u001b[0;32m   1474\u001b[0m             ax,\n\u001b[0;32m   1475\u001b[0m             \u001b[38;5;241m*\u001b[39m\u001b[38;5;28mmap\u001b[39m(sanitize_sequence, args),\n\u001b[0;32m   1476\u001b[0m             \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m{k: sanitize_sequence(v) \u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m kwargs\u001b[38;5;241m.\u001b[39mitems()})\n\u001b[0;32m   1478\u001b[0m     bound \u001b[38;5;241m=\u001b[39m new_sig\u001b[38;5;241m.\u001b[39mbind(ax, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m   1479\u001b[0m     auto_label \u001b[38;5;241m=\u001b[39m (bound\u001b[38;5;241m.\u001b[39marguments\u001b[38;5;241m.\u001b[39mget(label_namer)\n\u001b[0;32m   1480\u001b[0m                   \u001b[38;5;129;01mor\u001b[39;00m bound\u001b[38;5;241m.\u001b[39mkwargs\u001b[38;5;241m.\u001b[39mget(label_namer))\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\matplotlib\\axes\\_axes.py:4901\u001b[0m, in \u001b[0;36mAxes.scatter\u001b[1;34m(self, x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, edgecolors, plotnonfinite, **kwargs)\u001b[0m\n\u001b[0;32m   4897\u001b[0m         keys_str \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mjoin(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mk\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;28;01mfor\u001b[39;00m k \u001b[38;5;129;01min\u001b[39;00m extra_keys)\n\u001b[0;32m   4898\u001b[0m         _api\u001b[38;5;241m.\u001b[39mwarn_external(\n\u001b[0;32m   4899\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNo data for colormapping provided via \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mc\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   4900\u001b[0m             \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mParameters \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mkeys_str\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m will be ignored\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m-> 4901\u001b[0m collection\u001b[38;5;241m.\u001b[39m_internal_update(kwargs)\n\u001b[0;32m   4903\u001b[0m \u001b[38;5;66;03m# Classic mode only:\u001b[39;00m\n\u001b[0;32m   4904\u001b[0m \u001b[38;5;66;03m# ensure there are margins to allow for the\u001b[39;00m\n\u001b[0;32m   4905\u001b[0m \u001b[38;5;66;03m# finite size of the symbols.  In v2.x, margins\u001b[39;00m\n\u001b[0;32m   4906\u001b[0m \u001b[38;5;66;03m# are present by default, so we disable this\u001b[39;00m\n\u001b[0;32m   4907\u001b[0m \u001b[38;5;66;03m# scatter-specific override.\u001b[39;00m\n\u001b[0;32m   4908\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m mpl\u001b[38;5;241m.\u001b[39mrcParams[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m_internal.classic_mode\u001b[39m\u001b[38;5;124m'\u001b[39m]:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\matplotlib\\artist.py:1216\u001b[0m, in \u001b[0;36mArtist._internal_update\u001b[1;34m(self, kwargs)\u001b[0m\n\u001b[0;32m   1209\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_internal_update\u001b[39m(\u001b[38;5;28mself\u001b[39m, kwargs):\n\u001b[0;32m   1210\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m   1211\u001b[0m \u001b[38;5;124;03m    Update artist properties without prenormalizing them, but generating\u001b[39;00m\n\u001b[0;32m   1212\u001b[0m \u001b[38;5;124;03m    errors as if calling `set`.\u001b[39;00m\n\u001b[0;32m   1213\u001b[0m \n\u001b[0;32m   1214\u001b[0m \u001b[38;5;124;03m    The lack of prenormalization is to maintain backcompatibility.\u001b[39;00m\n\u001b[0;32m   1215\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m-> 1216\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_update_props(\n\u001b[0;32m   1217\u001b[0m         kwargs, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{cls.__name__}\u001b[39;00m\u001b[38;5;124m.set() got an unexpected keyword argument \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1218\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{prop_name!r}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\matplotlib\\artist.py:1190\u001b[0m, in \u001b[0;36mArtist._update_props\u001b[1;34m(self, props, errfmt)\u001b[0m\n\u001b[0;32m   1188\u001b[0m             func \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mgetattr\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mset_\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mk\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m)\n\u001b[0;32m   1189\u001b[0m             \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mcallable\u001b[39m(func):\n\u001b[1;32m-> 1190\u001b[0m                 \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mAttributeError\u001b[39;00m(\n\u001b[0;32m   1191\u001b[0m                     errfmt\u001b[38;5;241m.\u001b[39mformat(\u001b[38;5;28mcls\u001b[39m\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mtype\u001b[39m(\u001b[38;5;28mself\u001b[39m), prop_name\u001b[38;5;241m=\u001b[39mk))\n\u001b[0;32m   1192\u001b[0m             ret\u001b[38;5;241m.\u001b[39mappend(func(v))\n\u001b[0;32m   1193\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ret:\n",
      "\u001b[1;31mAttributeError\u001b[0m: PathCollection.set() got an unexpected keyword argument 'C'"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x,y1,marker='*',C='orange',s=200)\n",
    "plt.scatter(x,y2,marker='*',C='yellow',s=300)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "f57c72ba-9249-49b6-a0a2-bb262f0cb5a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Histogram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "293b628f-5953-44c2-b13a-5a76163875d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = [3,3,3,7,8,8,5,5,5,5,5,5,4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "1a8dd516-7411-4495-b111-590785fabd65",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([3., 0., 1., 0., 6., 0., 0., 0., 1., 2.]),\n",
       " array([3. , 3.5, 4. , 4.5, 5. , 5.5, 6. , 6.5, 7. , 7.5, 8. ]),\n",
       " <BarContainer object of 10 artists>)"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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AEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAEAaYQEApBEWAECaqsKiq6srjjvuuBg1alS0t7fHl7/85XjqqadqNRsA0GCqCov7778/5syZEz09PXHffffFO++8E2eeeWZs3769VvMBAA1keDUbr1q1atDy0qVLo729PdatWxdf+MIXUgcDABpPVWHxv/r6+iIiYr/99tvpNuVyOcrl8sByqVT6OIcEAHZjuxwWlUolOjs748QTT4xJkybtdLuurq5YsGDBrh4GAOpm/Nx76z1C1Z5fNKOux9/l3wr5/ve/H48//ngsW7bsA7ebN29e9PX1DTw2b968q4cEAHZzu3TF4pJLLol77rknHnjggRg3btwHblsoFKJQKOzScABAY6kqLCqVSlxyySWxYsWKWLNmTUyYMKFWcwEADaiqsJgzZ07ceeed8Yc//CFGjRoVr776akREtLW1xV577VWTAQGAxlHVPRbd3d3R19cXp5xySowZM2bgcdddd9VqPgCggVT9UggAwM74rBAAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAII2wAADSCAsAIE3VYfHAAw/EzJkzY+zYsdHS0hJ33313DcYCABpR1WGxffv2+PznPx8333xzLeYBABrY8Gp3mD59ekyfPr0WswAADc49FgBAmqqvWFSrXC5HuVweWC6VSrU+JABQJzUPi66urliwYEGtD8MQGj/33nqPULXnF82o9wjwideIf3dQvZq/FDJv3rzo6+sbeGzevLnWhwQA6qTmVywKhUIUCoVaHwYA2A1UHRbbtm2LZ555ZmD5ueeei8ceeyz222+/OPjgg1OHAwAaS9VhsXbt2jj11FMHljs7OyMiYvbs2XHrrbemDQYANJ6qw+KUU06JSqVSi1kAgAbnfSwAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIs0th8atf/SomTJgQe+65Zxx77LHxl7/8JXsuAKABVR0Wd911V1x++eXxox/9KB599NE46aSTYvr06bFp06ZazAcANJCqw+KGG26Ib37zm/Gtb30rjjjiiLjxxhujWCxGd3d3LeYDABrI8Go2fvvtt2PdunUxd+7cQevPPPPMePDBB993n3K5HOVyeWC5r68vIiJKpVK1s36oHeX/pH/PWqvFeag153noONc0k0b8eW5Etfoz+O73rVQqH7hdVWHx+uuvR39/fxx44IGD1h944IHx6quvvu8+XV1dsWDBgvesLxaL1Ry6abXdWO8JPhmc56HjXEN91frP4NatW6OtrW2nX68qLN7V0tIyaLlSqbxn3bvmzZsXnZ2dA8s7duyIf/3rXzF69Oid7rMrSqVSFIvF2Lx5c7S2tqZ9XwZznoeOcz00nOeh4TwPjVqe50qlElu3bo2xY8d+4HZVhcX+++8fw4YNe8/ViS1btrznKsa7CoVCFAqFQev23Xffag5bldbWVj+0Q8B5HjrO9dBwnoeG8zw0anWeP+hKxbuqunlzxIgRceyxx8Z99903aP19990XU6dOrW46AKDpVP1SSGdnZ1xwwQUxZcqU6OjoiMWLF8emTZviO9/5Ti3mAwAaSNVh8fWvfz3eeOONuOaaa+KVV16JSZMmxR//+Mc45JBDajHfR1YoFOJnP/vZe152IZfzPHSc66HhPA8N53lo7A7nuaXyYb83AgDwEfmsEAAgjbAAANIICwAgjbAAANI0fFh0d3fH5MmTB94MpKOjI1auXFnvsZpeV1dXtLS0xOWXX17vUZrK1VdfHS0tLYMeBx10UL3HakovvfRSnH/++TF69OjYe++94+ijj45169bVe6ymM378+Pf8TLe0tMScOXPqPVpTeeedd+LHP/5xTJgwIfbaa6/4zGc+E9dcc03s2LFjyGfZpbf03p2MGzcuFi1aFIcddlhERNx2221x9tlnx6OPPhoTJ06s83TNqbe3NxYvXhyTJ0+u9yhNaeLEibF69eqB5WHDhtVxmub05ptvxrRp0+LUU0+NlStXRnt7ezz77LM1fVfgT6re3t7o7+8fWP7HP/4RZ5xxRpxzzjl1nKr5XH/99fHrX/86brvttpg4cWKsXbs2Lrroomhra4vLLrtsSGdp+LCYOXPmoOWFCxdGd3d39PT0CIsa2LZtW8yaNSuWLFkS1157bb3HaUrDhw93laLGrr/++igWi7F06dKBdePHj6/fQE3sgAMOGLS8aNGiOPTQQ+Pkk0+u00TN6aGHHoqzzz47ZsyYERH///O8bNmyWLt27ZDP0vAvhfy3/v7+WL58eWzfvj06OjrqPU5TmjNnTsyYMSNOP/30eo/StDZs2BBjx46NCRMmxLnnnhsbN26s90hN55577okpU6bEOeecE+3t7XHMMcfEkiVL6j1W03v77bfjjjvuiIsvvjj1QyiJOPHEE+PPf/5zPP300xER8fe//z3++te/xpe+9KUhn6Xhr1hERKxfvz46Ojrirbfein322SdWrFgRRx55ZL3HajrLly+PRx55JHp7e+s9StM6/vjj4/bbb4/Pfvaz8dprr8W1114bU6dOjSeeeCJGjx5d7/GaxsaNG6O7uzs6Oztj/vz58fDDD8ell14ahUIhLrzwwnqP17Tuvvvu+Pe//x3f+MY36j1K07nqqquir68vDj/88Bg2bFj09/fHwoUL47zzzhv6YSpNoFwuVzZs2FDp7e2tzJ07t7L//vtXnnjiiXqP1VQ2bdpUaW9vrzz22GMD604++eTKZZddVr+hPgG2bdtWOfDAAyu/+MUv6j1KU/nUpz5V6ejoGLTukksuqZxwwgl1muiT4cwzz6ycddZZ9R6jKS1btqwybty4yrJlyyqPP/545fbbb6/st99+lVtvvXXIZ2mKKxYjRowYuHlzypQp0dvbGzfddFPccsstdZ6seaxbty62bNkSxx577MC6/v7+eOCBB+Lmm2+OcrnsJsMaGDlyZBx11FGxYcOGeo/SVMaMGfOeq5pHHHFE/O53v6vTRM3vhRdeiNWrV8fvf//7eo/SlH7wgx/E3Llz49xzz42IiKOOOipeeOGF6OrqitmzZw/pLE0RFv+rUqlEuVyu9xhN5bTTTov169cPWnfRRRfF4YcfHldddZWoqJFyuRxPPvlknHTSSfUepalMmzYtnnrqqUHrnn766bp/mGIzW7p0abS3tw/cXEiu//znP7HHHoNvmxw2bJhfN90V8+fPj+nTp0exWIytW7fG8uXLY82aNbFq1ap6j9ZURo0aFZMmTRq0buTIkTF69Oj3rGfXXXnllTFz5sw4+OCDY8uWLXHttddGqVQa8n9xNLsrrrgipk6dGtddd1187Wtfi4cffjgWL14cixcvrvdoTWnHjh2xdOnSmD17dgwf3vBPO7ulmTNnxsKFC+Pggw+OiRMnxqOPPho33HBDXHzxxUM+S8P/H37ttdfiggsuiFdeeSXa2tpi8uTJsWrVqjjjjDPqPRpU7cUXX4zzzjsvXn/99TjggAPihBNOiJ6eHv+STnbcccfFihUrYt68eXHNNdfEhAkT4sYbb4xZs2bVe7SmtHr16ti0aVNdnuQ+KX75y1/GT37yk/je974XW7ZsibFjx8a3v/3t+OlPfzrks/jYdAAgTVO9jwUAUF/CAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBIIywAgDTCAgBI83+03t/Wn7y89gAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "f64e78cc-1608-4414-9469-ed2b2e5394e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "id": "9aeb623a-09b0-4f31-8523-c8c5a3c225a4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Users\\\\calem'"
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "id": "844ff848-87d0-4abc-8221-042b4d3a1ec5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "af2e641e-e47d-44e0-83bd-f77148ac1100",
   "metadata": {},
   "outputs": [],
   "source": [
    "iris=pd.read_csv('iris.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "id": "55f21235-d352-43df-821b-c301f1d9ca96",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SepalLengthCm</th>\n",
       "      <th>SepalWidthCm</th>\n",
       "      <th>PetalLengthCm</th>\n",
       "      <th>PetalWidthCm</th>\n",
       "      <th>Species</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>Iris-setosa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm      Species\n",
       "0   1            5.1           3.5            1.4           0.2  Iris-setosa\n",
       "1   2            4.9           3.0            1.4           0.2  Iris-setosa\n",
       "2   3            4.7           3.2            1.3           0.2  Iris-setosa\n",
       "3   4            4.6           3.1            1.5           0.2  Iris-setosa\n",
       "4   5            5.0           3.6            1.4           0.2  Iris-setosa"
      ]
     },
     "execution_count": 192,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iris.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "id": "7cac06a9-c476-431c-ad06-bdd0598b3a7f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(iris['PetalWidthCm'],color='orange',bins=20)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "id": "5a60fbf6-8ba0-4e45-9eab-d716fce24802",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Box Plot and Violon Plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "id": "e277ca93-defe-4a12-90f1-c6284b34b103",
   "metadata": {},
   "outputs": [],
   "source": [
    "one = [1,2,3,4,5,6,7,8,9]\n",
    "two = [1,4,3,5,2,3,1,5,4]\n",
    "three = [6,8,9,7,8,9,6,8]\n",
    "data=[one,two,three]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "id": "4ae148e8-a474-43a3-ba23-bb8dac9d5d27",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[1, 2, 3, 4, 5, 6, 7, 8, 9],\n",
       " [1, 4, 3, 5, 2, 3, 1, 5, 4],\n",
       " [6, 8, 9, 7, 8, 9, 6, 8]]"
      ]
     },
     "execution_count": 218,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "id": "211789cb-38d5-4370-89cc-abdffa6c73a4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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5OjjPplOuVyOkZGRaG1tjWOOOfQrKcb9isUxxxwTM2bMGO9lJ6zm5mb/s3DUcb/kaOM+mcZrXal4hRdvAgDJCAsAIBlhUadyuVx885vfjFwuV+tRYIz7JUcb98nxN+4v3gQAJi5XLACAZIQFAJCMsAAAkhEWAEAywqLOrF27Ni677LJobW2NhoaGeOihh2o9EpNcb29vnHvuuZHP52PatGmxePHieOqpp2o9FpPc8uXLY86cOWMfjDVv3rx49NFHaz3WpCAs6syePXviXe96V9x11121HgUiIqK/vz+WLl0a69evj8cffzxeeumluOSSS2LPnj21Ho1JbMaMGXHbbbfFxo0bY+PGjXHRRRfFokWLYuvWrbUebcLzdtM61tDQEKtWrYrFixfXehQY849//COmTZsW/f39ccEFF9R6HBhzwgknxH/913/FZz/72VqPMqGN+3eFABPb8PBwRLz8IA5Hg3379sVPf/rT2LNnT8ybN6/W40x4wgJIplwuR3d3d5x//vlx1lln1XocJrktW7bEvHnz4oUXXojjjz8+Vq1aFWeeeWatx5rwhAWQzOc///n43e9+F+vWrav1KBBnnHFGPPnkk7Fr16548MEHY8mSJdHf3y8uqkxYAElce+218cgjj8TatWtjxowZtR4H4thjj413vOMdERFxzjnnxIYNG+LOO++Mu+++u8aTTWzCAjgi5XI5rr322li1alWsWbMmTjvttFqPBAdVLpejVCrVeowJT1jUmd27d8eOHTvGtp9++ul48skn44QTTohTTjmlhpMxWS1dujRWrlwZDz/8cOTz+di5c2dERLS0tERjY2ONp2OyuvHGG2PBggXR1tYWIyMj8cADD8SaNWti9erVtR5twvN20zqzZs2auPDCC191+5IlS+K+++4b/4GY9BoaGg56+4oVK+Izn/nM+A4D/99nP/vZ+MUvfhF//etfo6WlJebMmRM33HBDXHzxxbUebcITFgBAMj55EwBIRlgAAMkICwAgGWEBACQjLACAZIQFAJCMsAAAkhEWAEAywgIASEZYAADJCAsAIBlhAQAk8/8Ae4aE6eDS2GEAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.boxplot(data)\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "id": "74f5b34f-9d06-4a09-907a-cf1c4fe1adac",
   "metadata": {},
   "outputs": [],
   "source": [
    "one = [1,2,3,4,5,6,7,8,9]\n",
    "two = [1,4,3,5,2,3,1,5,4]\n",
    "three = [6,8,9,7,8,9,6,8]\n",
    "data=[one,two,three]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "id": "a556fecb-a11d-4b3a-afcd-70dae8699381",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[1, 2, 3, 4, 5, 6, 7, 8, 9],\n",
       " [1, 4, 3, 5, 2, 3, 1, 5, 4],\n",
       " [6, 8, 9, 7, 8, 9, 6, 8]]"
      ]
     },
     "execution_count": 226,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "id": "1a7f28b7-b8f5-40c8-94b7-1fc7ed48a136",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.violinplot(data,showmedians=True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "56779d57-6341-471e-a3dc-9285b432391a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
